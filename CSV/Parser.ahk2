;;This parser class is nested in the CSV class;
;;It uses a (somewhat sloppy) finite state machine to parse input chars

;;SF.TODO -> I do plan to abstract a full FSM class based on this code
class parser {
	;;State Table (2 bits, 4 states)
	;;0 = Not Quoted, not escaped (INITIAL STATE)
	;;1 = Quoted, not escaped
	;;2 = Not Quoted, escaped
	;;3 = Quoted, escaped
	
	;;Input Table (3 bits, 5 possible values)
	;;0 = normal char
	;;1 = delimiter char (default to ,)
	;;2 = quote char (")
	;;3 = escape char (`)
	;;4 = w.s. char (space or tab)
	
	;;Output Table (2 bits, 3 possible values)
	;;0 = do nothing
	;;1 = push char to buffer
	;;2 = push buffer to array and clear buffer
	
	__New(delim:=","){
		this.delim := delim
		this.cChar :=""
		this.buffer:=""
		this.output:=[]
		this.cState:=0
		this.sigIn:=0
		this.sigOut:=0
	}
	
	;;Take a char in and process it
	feed(charIn){
		this.cChar := charIn
		
		;;Process the input signal
		this.processInput()
		
		;;Set the output signal
		this.processOutput()
		
		;;Bad separation of concerns, but now run the buffer ops depending on sigOut
		if(this.sigOut=1){
			this.bufferChar()
		} else if(this.sigOut=2){
			this.acceptBuffer()
		}
		
		;;Return an array of [oldState, newState]
		oldState := this.cState
		
		;;Calculate the next State and make it current
		this.cState := this.nextState()
		
		;;Uncomment this line to examine charIn, input signal, old state, new state, and output signal
		;;msgbox(this.cChar . " : " . this.sigIn . ") " . oldState . " -> " . this.cState . " (" . this.sigOut)
		
		return [oldState, this.cState]
	}
	
	;;If we're at the end of the input stream, close/push the buffer to the array
	;;Raise an error if we're still supposedly in quotations or escaped
	end(){
		if(this.cState = 0){
			this.acceptBuffer()
		} else {
			throw exception("Imbalanced quotations and/or unused escape chars in CSV input.")
		}
	}
	
	;;Determine what kind of input char we've received and set the input signal
	processInput(){
		x := this.cChar
		
		if(x=this.delim){
			this.sigIn:=1
		} else if(x="`""){
			this.sigIn:=2
		} else if(x="``"){
			this.sigIn:=3
		} else if(x="`t" OR x=" "){
			this.sigIn:=4
		} else {
			this.sigIn:=0
		}
		
		return this.sigIn
	}
	
	;;Determine the nextState based on input and cState
	nextState(){
		;;Define our Total Input State (a term that might be a real thing idk)
		TIS := (this.cState << 3)+this.sigIn
		
		;;Define the TIS<->NextState table
		stateTable := Map(0,0
			,1,0
			,2,1
			,3,2
			,4,0
			,8,1
			,9,1
			,10,0
			,11,3
			,12,1
			,16,0
			,17,0
			,18,0
			,19,0
			,20,0
			,24,1
			,25,1
			,26,1
			,27,1
			,28,1)
		
		;;Perform the lookup based on input state
		nState := stateTable[TIS]
		return nState
	}
	
	;;Determine what kind of output we have
	processOutput(){
		;;Define our Total Input State (a term that might be a real thing idk)
		TIS := (this.cState << 3)+this.sigIn
		
		;;Define the TIS<->OutputSignal table
		stateTable := Map(0,1
			,1,2
			,2,0
			,3,0
			,4,0
			,8,1
			,9,1
			,10,0
			,11,0
			,12,1
			,16,1
			,17,1
			,18,1
			,19,1
			,20,1
			,24,1
			,25,1
			,26,1
			,27,1
			,28,1)
		
		return this.sigOut := stateTable[TIS]
	}
	
	;;Push the current char to the buffer
	bufferChar(){
		this.buffer .= this.cChar
		return this.buffer
	}
	
	;;Push the current buffer to the output array as an item
	;;Then clear the buffer
	acceptBuffer(){
		this.output.push(this.buffer)
		this.buffer:=""
		return this.buffer
	}
}