;;Range - returns a sequence of numerical values as an array
;;Overall, works very similar to expressing a range of numbers using the colon operator in matlab and GNU octave
;;Range(start, stop) -> returns an array of all values from start to stop counting by 1
;;Range(start, step, stop) -> returns an array of integers from start to stop, counting by step
;;Similar to colon in MATLab, 'stop' will only be included in the results if it is exactly equal to start+n*step where n is an integer
Range(prms*) {
	L := prms.Length
	if(L=2){
		start := prms[1]
		stop := prms[2]
		step := 1
	} else if(L=3){
		start := prms[1]
		stop := prms[3]
		step := prms[2]
	} else {
		;;If not 2 or 3 params, get mad
		throw Exception("Range can accept only 2 or 3 arguments.")
	}
	
	;;check that step is a positive int
	_checkStep(step)
	
	;;Check that limits are unique integers, then
	;;Multiply step by the sign of the direction
	step *= _checkStartStop(start, stop)
	
	;;Initialize variables for our loop
	output := []
	n := start

	while((stop-n)*step >= 0){
		output.push(n)
		n := n+step
	}
	
	return output
	
	;;Return true if step is positive and smaller than the interval size,
	;;else return false
	_checkStep(stepVal){
		if not (stepVal>0 and IsNumber(stepVal)){
			throw Exception("Range 'step' must be numerical and positive in value. `r`nStart and Stop will determine the direction of the step.")
		} else {
			return
		}
	}
	
	;;Checks start and stop to make sure they are integer values
	_checkStartStop(start, stop){
		;;If either parameter is non-integer, it will compose its own error message
		startMsg := (IsNumber(start))?true:false
		stopMsg := (IsNumber(stop))?true:false
		
		;;If either message is non-empty, it will trigger the following conditional
		if not(startMsg or stopMsg){
			throw Exception("Range 'start' and 'stop' should be numerical in value.")
		} else {
			;;If condition wasn't triggered, check equality and return step direction
			if (stop<start){
				return -1
			} else if(start<stop){
				return 1
			} else {
				throw Exception("Range 'start' and 'stop' should not be the same value.")
			}
		}
	}
}

;; test := Range(-7,0.3,-1)
;; msgbox(Format("{1}, {2}, {3}, ... {4}",test[1], test[2], test[3], test[test.length]))